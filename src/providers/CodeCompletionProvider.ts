import * as vscode from 'vscode';
import { CodeCompletionService } from '../services/CodeCompletionService';

export class CodeCompletionProvider implements vscode.CompletionItemProvider {
    private completionService: CodeCompletionService;
    private outputChannel: vscode.OutputChannel;

    constructor(outputChannel: vscode.OutputChannel) {
        this.completionService = new CodeCompletionService(outputChannel);
        this.outputChannel = outputChannel;
    }

    async provideCompletionItems(
        document: vscode.TextDocument,
        position: vscode.Position,
        token: vscode.CancellationToken,
        context: vscode.CompletionContext
    ): Promise<vscode.CompletionItem[] | vscode.CompletionList | undefined> {
        try {
            // Check if we should provide AI completions
            if (!this.completionService.shouldTriggerCompletion(context)) {
                return undefined;
            }

            // Check if Ollama is available
            const isConnected = await this.completionService['ollamaClient'].checkConnection();
            if (!isConnected) {
                this.outputChannel.appendLine('[CodeCompletion] Ollama not connected, skipping AI suggestions');
                return undefined;
            }

            // Get AI suggestions
            const suggestions = await this.completionService.getSuggestions(document, position, context);
            
            if (suggestions.length > 0) {
                this.outputChannel.appendLine(`[CodeCompletion] Provided ${suggestions.length} AI suggestions`);
                return suggestions;
            }

            return undefined;

        } catch (error) {
            this.outputChannel.appendLine(`[CodeCompletion] Error providing completions: ${error}`);
            return undefined;
        }
    }

    resolveCompletionItem?(
        item: vscode.CompletionItem,
        token: vscode.CancellationToken
    ): vscode.ProviderResult<vscode.CompletionItem> {
        // Add additional details to the completion item if needed
        if (item.detail === 'AI Suggestion') {
            item.documentation = new vscode.MarkdownString(
                '**AI-Generated Suggestion**\n\n' +
                'This suggestion was generated by the Duvut Assistant AI based on your code context.\n\n' +
                'Press **TAB** to accept this suggestion.'
            );
        }
        return item;
    }
} 